cmake_minimum_required(VERSION 3.19)
project(AMDLIBM LANGUAGES C CXX ASM)

message("Compiler used ${CMAKE_CXX_COMPILER}")
message("Compiler version ${CMAKE_CXX_COMPILER_VERSION}")

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(DCMAKE_RULE_MESSAGES OFF)
set(CMAKE_POLICY_DEFAULT_CMP0077 NEW)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

option(TESTS "Enbalbe testing" ON)

function(add_compilation_flags variableName)
    set(old_flags ${${variableName}})
    message(STATUS "COMPILATION FLAGS ${old_flags}")
    add_compile_options("$<$<COMPILE_LANGUAGE:C>:${old_flags}>")
    add_compile_options("$<$<COMPILE_LANGUAGE:CXX>:${old_flags}>")
endfunction()

execute_process(COMMAND git describe --tags --dirty=\(modified\) --always
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        OUTPUT_VARIABLE version_str OUTPUT_STRIP_TRAILING_WHITESPACE)
message(STATUS "VERSION: ${version_str}")
file(WRITE src/version.build.h
        "/*
* This file is automatically generated by the build process
* DO NOT EDIT!
*/

static const char VERSION_STRING[] = \"${version_str}\";

static const char* alm_get_build(void);
static const char* alm_get_build(void)
{
        return VERSION_STRING;
}
"
        )


list(APPEND FLAGS -Wall -W -Wstrict-prototypes -Werror
        -Wno-unused-but-set-parameter
        -Wno-unused-parameter
        -mavx2 -march=native
        -flax-vector-conversions)

add_compilation_flags(FLAGS)

if (ENABLE_LTO)
    include(CheckIPOSupported)
    check_ipo_supported(RESULT supported OUTPUT error)
    if (supported)
        if (POLICY CMP0069)
            cmake_policy(SET CMP0069 NEW)
            set(CMAKE_POLICY_DEFAULT_CMP0069 NEW)
        endif ()
        message(STATUS "IPO / LTO enabled")
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
    else ()
        message(STATUS "IPO / LTO not supported: <${error}>")
    endif ()
endif ()

file(GLOB_RECURSE SOURCES "${AMDLIBM_SOURCE_DIR}/src/*.c*")
file(GLOB_RECURSE ASSEMBLY_SRC "${AMDLIBM_SOURCE_DIR}/src/*.S")
message(STATUS "SOURCES: ${SOURCES}")
message(STATUS "ASSEMBLY_SRC: ${ASSEMBLY_SRC}")

#list(REMOVE_ITEM SOURCES MapEntryPoints.c amd_pow.c exp2.c exp_tables*.c)

add_library(amdlibm STATIC ${SOURCES} ${ASSEMBLY_SRC})
target_include_directories(amdlibm PUBLIC
        ${AMDLIBM_SOURCE_DIR}/include
        ${AMDLIBM_SOURCE_DIR}/include/external
        )
target_include_directories(amdlibm PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/src/optimized
        ${CMAKE_CURRENT_SOURCE_DIR}/src/isa/avx2
        ${CMAKE_CURRENT_SOURCE_DIR}/src/isa/include
        ${CMAKE_CURRENT_SOURCE_DIR}/src/isa/avx2/include
        ${CMAKE_CURRENT_SOURCE_DIR}/src/isa/avx2/gas/include
        )

if (TESTS)
    add_subdirectory(gtests)
endif ()
